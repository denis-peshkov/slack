// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tab.Slack.Integration.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ManagingTeamGroupsFeature : Xunit.IUseFixture<ManagingTeamGroupsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GroupsTest.feature"
#line hidden
        
        public ManagingTeamGroupsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Managing team groups", "\r\nIn order to manage team groups within Slack\r\nI want to be able to issue request" +
                    "s to create and control groups", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(ManagingTeamGroupsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "List all groups")]
        public virtual void ListAllGroups()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all groups", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I call groups.list with excludeArchived equal to True", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table1.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 9
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table1, "Then ");
#line 12
 testRunner.When("I call groups.list with excludeArchived equal to False", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table2.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 13
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Set a group purpose")]
        public virtual void SetAGroupPurpose()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set a group purpose", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table3.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table3.AddRow(new string[] {
                        "grouppurpose",
                        "<new purpose SSS-SSS>"});
#line 19
 testRunner.When("I call groups.setpurpose with:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table4.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 23
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Set a group topic")]
        public virtual void SetAGroupTopic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set a group topic", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table5.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table5.AddRow(new string[] {
                        "grouptopic",
                        "<new topic SSS-SSS>"});
#line 29
 testRunner.When("I call groups.settopic with:", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table6.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 33
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Gather information on a group")]
        public virtual void GatherInformationOnAGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather information on a group", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.When("I call groups.info with groupid equal to TestGroup:id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table7.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 40
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Gather history about a group")]
        public virtual void GatherHistoryAboutAGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather history about a group", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table8.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table8.AddRow(new string[] {
                        "messagecount",
                        "5"});
#line 46
 testRunner.When("I call groups.history with:", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table9.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 51
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Mark a group as read")]
        public virtual void MarkAGroupAsRead()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark a group as read", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I post a random message to TestGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table10.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 58
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table11.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table11.AddRow(new string[] {
                        "timestamp",
                        "<NOW>"});
#line 61
 testRunner.When("I call groups.mark with:", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table12.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 65
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Opening and closing groups")]
        public virtual void OpeningAndClosingGroups()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening and closing groups", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("the group OpenGroup is closed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.When("I call groups.open with groupid equal to OpenGroup:id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table13.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 73
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table13, "Then ");
#line 76
 testRunner.When("I call groups.close with groupid equal to OpenGroup:id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table14.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 77
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Create a new group and manage it")]
        public virtual void CreateANewGroupAndManageIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new group and manage it", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.When("I call groups.create with name equal to <createdgroupNNNNN>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table15.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 84
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table15, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table16.AddRow(new string[] {
                        "groupid",
                        "<createdgroupNNNNN>:id"});
            table16.AddRow(new string[] {
                        "groupname",
                        "<renamedgroupNNNNN>:id"});
#line 87
 testRunner.When("I call groups.rename with:", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table17.AddRow(new string[] {
                        "groupname",
                        "<renamedgroupNNNNN>:id"});
#line 91
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Managing team groups")]
        [Xunit.TraitAttribute("Description", "Invite and kick a user from a group")]
        public virtual void InviteAndKickAUserFromAGroup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invite and kick a user from a group", ((string[])(null)));
#line 95
this.ScenarioSetup(scenarioInfo);
#line 96
 testRunner.Given("I am logged in to the Slack Web API as TabTest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
 testRunner.And("SampleUser is not in group TestGroup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table18.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table18.AddRow(new string[] {
                        "userid",
                        "SampleUser:id"});
#line 98
 testRunner.When("I call groups.invite with:", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table19.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 102
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Argument",
                        "Value"});
            table20.AddRow(new string[] {
                        "groupid",
                        "TestGroup:id"});
            table20.AddRow(new string[] {
                        "userid",
                        "SampleUser:id"});
#line 105
 testRunner.When("I call groups.kick with:", ((string)(null)), table20, "When ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResponsePath",
                        "RegEx"});
            table21.AddRow(new string[] {
                        "xx",
                        "xx"});
#line 109
 testRunner.Then("I should receive an ok response matching:", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ManagingTeamGroupsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ManagingTeamGroupsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
